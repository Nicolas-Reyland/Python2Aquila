/** Automatic translation of Python source code to Aquila by https://github.com/Nicolas-Reyland/Python2Aquila **/

/** Python default settings **/
#setting (interactive) false
#setting (debug) false
#setting (trace debug) false
#setting (translator debug) false
#setting (fail on context assertions) false
#setting (check function existence before runtime) false
#setting (lazy logic) true
#setting (allow tracing in frozen context) true
#setting (permafrost) false
#setting (flame mode) true
#setting (implicit declaration in assignment) true
#setting (redirect debug stout & stderr) false

/** Python functions in Aquila **/
function list range(start, stop, step)
	decl list l []
	for (decl i $start, $i < $stop, $i += $step)
		append_value($l, $i)
	end-for
	return($l)
end-function

function list _py_slice_list(l, start, stop, step)
	decl list spliced_list []
	for ($i = $start, $i < $stop, $i += $step)
		append_value($spliced_list, list_at($l, $i))
	end-for
	return($spliced_list)
end-function

/** Source Code **/
function recursive auto mergeSort(arr)
	if (length($arr) > 1)
		$mid = (length($arr) / 2)
		$L = _py_slice_list($arr, 0, $mid, 1)
		$R = _py_slice_list($arr, $mid, length($arr), 1)
		mergeSort($L)
		mergeSort($R)
		$i = $j = $k = 0 /** this is not legal **/
		while (($i < length($L)) & ($j < length($R)))
			if ($L[$i] < $R[$j])
				$arr[$k] = $L[$i]
				$i += 1
			else
				$arr[$k] = $R[$j]
				$j += 1
			end-if
			$k += 1
		end-while
		while ($i < length($L))
			$arr[$k] = $L[$i]
			$i += 1
			$k += 1
		end-while
		while ($j < length($R))
			$arr[$k] = $R[$j]
			$j += 1
			$k += 1
		end-while
	end-if
end-function

function recursive auto printList(arr)
	for ($i = 0, $i < length($arr), $i += 1)
		print_value_endl($arr[$i])
	end-for
	print_endl()
end-function

if (true)
	$arr = [12, 11, 13, 5, 6, 7]
	print_str_endl(Given array is:)
	printList($arr)
	mergeSort($arr)
	print_str_endl(Sorted array is:)
	printList($arr)
end-if
